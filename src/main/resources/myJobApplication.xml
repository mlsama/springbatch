<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/batch
                            http://www.springframework.org/schema/batch/spring-batch.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-4.3.xsd
                            http://www.springframework.org/schema/jdbc
                            http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
                            http://www.springframework.org/schema/task
                            http://www.springframework.org/schema/task/spring-task-4.3.xsd">

    <!--读取数据-->
    <bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="classpath:/data/user.txt"></property>
        <property name="lineMapper" ref="lineMapper"></property>
        <property name="linesToSkip" value="1"></property>
    </bean>
    <bean id="lineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <property name="lineTokenizer" ref="lineTokenizer"></property>
        <property name="fieldSetMapper" ref="fieldSetMapper"></property>
    </bean>
    <bean id="lineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="names" value="id,name,age"></property>
    </bean>
    <bean id="fieldSetMapper" class="com.mlsama.hellospringbatch.config.apart.UserFieldSetMapper"></bean>

    <!--核心业务处理-->
    <bean id="process" class="com.mlsama.hellospringbatch.config.apart.UserItemProcessor"></bean>
    <!--持久化处理-->
    <bean id="write" class="com.mlsama.hellospringbatch.config.apart.UserWriter"></bean>

    <!-- 选用内存级别的数据库，不在需要用oracle、mysql等数据库,采用h2数据库，
         不需要手动配置，只需要的pom.xml文件中引入h2即可 否则使用JobRepositoryFactoryBean设置数据源.
         使用机器内存管理springbatch信息，容易内存溢出。-->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"></property>
    </bean>
    <!-- 配置spring batch的jobRepository，负责与数据库打交道 -->
    <!--<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="databaseType" value="MySQL"></property>
    </bean>-->


    <bean id="executor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"></bean>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"></property>
        <property name="taskExecutor" ref="executor"></property>
    </bean>
    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

    <batch:job id="jobExample">
        <batch:step id="stepExample">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="reader"
                             processor="process"
                             writer="write"
                             commit-interval="1">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <!--**************与quarter整合调度***********************-->

    <!-- 注册job，把job注入到容器中，在jobLauncher启动job时才能从容器中获取要启动的Job -->
    <bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry"/>
    <bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
        <property name="jobRegistry" ref="jobRegistry"/>
    </bean>
    <!--“任务浏览器（JObExplorer）”是“任务存储器（JobRepository）”的只读版本，
                像后者一样，它可以通过工厂bean简单的配置生成-->
    <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--Quartz定时调度配置-->
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.mlsama.hellospringbatch.config.apart.QuartzJobLauncher"></property>
        <property name="jobDataMap">
            <map>
                <entry key="jobName" value="jobExample"></entry>
                <entry key="jobLauncher" value-ref="jobLauncher"></entry>
                <entry key="jobRegistry" value-ref="jobRegistry"></entry>
            </map>
        </property>
    </bean>

    <!-- 创建Scheduler -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
                <property name="jobDetail" ref="jobDetail" />
                <property name="cronExpression" value="0/3 * * * * ?" />
            </bean>
        </property>
    </bean>

</beans>